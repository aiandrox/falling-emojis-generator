{"version":3,"sources":["BackGround.js","EachEmoji.js","Emojis.js","App.js","reportWebVitals.js","index.js"],"names":["BackGround","style","position","zIndex","color","fontSize","fontFamily","width","margin","EachEmoji","props","emoji","bottom","right","isFalling","className","size","Emojis","emojis","map","index","searchTimerId","fallingTimerId","theme","createMuiTheme","rand","to","Math","floor","random","App","useState","typingString","setTypingString","fallingEmojis","setFallingEmojis","stackedEmojis","setStackedEmojis","fall","newFallingEmojis","i","length","push","id","randValue","useEffect","clearTimeout","setTimeout","value","emojiIndex","NimbleEmojiIndex","data","emojiArray","search","firstEmoji","replaceAll","concat","ThemeProvider","Container","maxWidth","height","justifyContent","display","flexDirection","alignItems","TextField","onChange","e","target","variant","fullWidth","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.de4dd087.chunk.js","sourcesContent":["export default function BackGround() {\n  return (\n    <h1\n      style={{\n        position: \"absolute\",\n        zIndex: -1,\n        color: \"#ffe1de\",\n        fontSize: \"2rem\",\n        fontFamily: \"BlinkMacSystemFont\",\n        width: \"120%\",\n        margin: \"-50px -10px\",\n      }}\n    >\n      grinning　smiley　smile　grin　laughing　joy　wink　blush　innocent　kissing　\n      relaxed　yum　hugging　expressionless　smirk　unamused　grimacing　relieved　\n      pensive　sleepy　sleeping　mask　cowboy_hat　sunglasses　confused　worried　duck　\n      swan　owl　flamingo　peacock　parrot　frog　crocodile　turtle　lizard　snake　\n      hushed　astonished　flushed　frowning　anguished　fearful　cry　sob　scream　\n      confounded　persevere　disappointed　sweat　weary　triumph　rage　angry　imp　\n      skull　hankey　ghost　alien　wave　hand　v　+1　-1　fist　facepunch　clap　handshake　\n      sheep　goat　dromedary_camel　camel　llama　giraffe_face　elephant　rhinoceros　\n      baguette_bread　pretzel　bagel　pancakes　waffle　cheese_wedge　meat_on_bone　\n      pray　selfie　muscle　leg　foot　ear　nose　brain　tooth　bone　eyes　eye　tongue　\n      lips　baby　child　boy　girl　adult　man　woman　bow　shrug　cop　guardsman　prince　\n      walking　runner　dancer　dancers　fencer　skier　snowboarder　golfer　surfer　\n      rowboat　swimmer　bicyclist　wrestlers　handball　juggling　bath　couple　\n      couplekiss　family　footprints　kiss　cupid　heartpulse　heartbeat　heart　100　\n      monkey_face　monkey　gorilla　orangutan　dog　guide_dog　service_dog　poodle　\n      wolf　fox_face　raccoon　cat　lion_face　tiger　leopard　horse　racehorse　\n      green_apple　pear　peach　cherries　strawberry　kiwifruit　tomato　coconut　\n      unicorn_face　zebra_face　deer　cow　ox　water_buffalo　pig　boar　pig_nose　ram　\n      hippopotamus　mouse　rat　hamster　rabbit　chipmunk　hedgehog　bat　bear　koala　\n      vampire　merperson　merman　mermaid　elf　genie　zombie　massage　haircut　\n      panda_face　sloth　otter　skunk　kangaroo　badger　feet　turkey　chicken　rooster　\n      hatching_chick　baby_chick　hatched_chick　bird　penguin　dove_of_peace　eagle　\n      dragon_face　dragon　sauropod　t-rex　whale　dolphin　fish　tropical_fish　\n      blowfish　shark　octopus　shell　snail　butterfly　bug　ant　bee　beetle　cricket　\n      white_flower　rosette　rose　wilted_flower　hibiscus　sunflower　blossom　tulip　\n      shamrock　four_leaf_clover　maple_leaf　fallen_leaf　leaves　anger　boom　dizzy　\n      grapes　melon　watermelon　tangerine　lemon　banana　pineapple　mango　apple　\n      green_apple　pear　peach　cherries　strawberry　kiwifruit　tomato　coconut　\n      avocado　eggplant　potato　carrot　corn　hot_pepper　cucumber　leafy_green　\n      broccoli　garlic　onion　mushroom　peanuts　chestnut　bread　croissant　\n      baguette_bread　pretzel　bagel　pancakes　waffle　cheese_wedge　meat_on_bone　\n      poultry_leg　cut_of_meat　bacon　hamburger　fries　pizza　hotdog　sandwich　taco　\n      burrito　stuffed_flatbread　falafel　egg　fried_egg　shallow_pan_of_food　stew　\n      bowl_with_spoon　green_salad　popcorn　butter　salt　canned_food　bento　\n      rice_cracker　rice_ball　rice　curry　ramen　spaghetti　sweet_potato　oden　\n      princess　angel　santa　superhero　supervillain　mage　fairy　\n      sushi　fried_shrimp　fish_cake　moon_cake　dango　dumpling　fortune_cookie　\n      takeout_box　crab　lobster　shrimp　squid　oyster　icecream　shaved_ice　\n      ice_cream　doughnut　cookie　birthday　cake　cupcake　pie　chocolate_bar　candy　\n      lollipop　custard　honey_pot　baby_bottle　glass_of_milk　coffee　tea　sake　\n      champagne　wine_glass　cocktail　tropical_drink　beer　beers　clinking_glasses　\n      tumbler_glass　cup_with_straw　beverage_box　mate_drink　ice_cube　chopsticks　\n      knife_fork_plate　fork_and_knife　spoon　hocho　ampho　dash　hole　bomb　zzz　\n      grapes　melon　watermelon　tangerine　lemon　banana　pineapple　mango　apple　\n      avocado　eggplant　potato　carrot　corn　hot_pepper　cucumber　leafy_green　\n      seedling　evergreen_tree　deciduous_tree　palm_tree　cactus　ear_of_rice　herb　\n      broccoli　garlic　onion　mushroom　peanuts　chestnut　bread　croissant　\n      spider　spider_web　scorpion　mosquito　microbe　bouquet　cherry_blossom\n    </h1>\n  );\n}\n","import { Emoji } from \"emoji-mart\";\n\nexport default function EachEmoji(props) {\n  const emoji = props.emoji;\n\n  return (\n    <div\n      style={{\n        position: \"absolute\",\n        bottom: emoji.bottom,\n        right: emoji.right,\n      }}\n    >\n      {props.isFalling ? (\n        <div className=\"animate__animated animate__fadeInDownBig animate__slower\">\n          <Emoji emoji={emoji} size={64} />\n        </div>\n      ) : (\n        <div className=\"\">\n          <Emoji emoji={emoji} size={64} />\n        </div>\n      )}\n    </div>\n  );\n}\n","import EachEmoji from \"./EachEmoji\";\n\nexport default function Emojis(props) {\n  return (\n    <div>\n      {props.emojis.map((emoji, index) => (\n        <EachEmoji\n          key={index}\n          emoji={emoji}\n          isFalling={props.isFalling}\n        ></EachEmoji>\n      ))}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { NimbleEmojiIndex } from \"emoji-mart\";\nimport data from \"emoji-mart/data/google.json\";\nimport { ThemeProvider, TextField, Container } from \"@material-ui/core\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\n\nimport BackGround from \"./BackGround\";\nimport Emojis from \"./Emojis\";\n\nlet searchTimerId = null;\nlet fallingTimerId = null;\nconst theme = createMuiTheme();\n\nfunction rand(to) {\n  return Math.floor(Math.random() * to) + 1;\n}\n\nfunction App() {\n  const [typingString, setTypingString] = useState(\"\");\n  const [fallingEmojis, setFallingEmojis] = useState([]);\n  const [stackedEmojis, setStackedEmojis] = useState([]);\n\n  useEffect(() => {\n    if (fallingTimerId !== null) {\n      clearTimeout(fallingTimerId);\n    }\n    if (searchTimerId !== null) {\n      clearTimeout(searchTimerId);\n    }\n    searchTimerId = setTimeout(() => {\n      search();\n    }, 500);\n  }, [typingString]);\n\n  useEffect(() => {\n    fallingTimerId = setTimeout(() => {\n      completeFall();\n    }, 3000);\n  }, [fallingEmojis]);\n\n  function search() {\n    const value = typingString;\n    if (value === \"\") return;\n\n    const emojiIndex = new NimbleEmojiIndex(data);\n    const emojiArray = emojiIndex.search(value);\n    const firstEmoji = emojiArray[0];\n\n    if (value === \"pien\" || value === \"ぴえん\") {\n      const pien = emojiIndex.search(\"pleading\")[0];\n      fall(pien);\n    }\n\n    if (!firstEmoji) return;\n\n    if (\n      value.replaceAll(/[-|_]/g, \" \") ===\n        firstEmoji[\"id\"].replaceAll(/[-|_]/g, \" \") ||\n      emojiArray.length === 1\n    ) {\n      fall(firstEmoji);\n    }\n  }\n\n  function fall(emoji) {\n    const newFallingEmojis = [];\n    for (let i = 0; i < rand(10) + 10; i++) {\n      const bottom = Math.floor(stackedEmojis.length / 80) * 40 + rand(10);\n      newFallingEmojis.push({\n        id: emoji[\"id\"],\n        bottom: bottom - 15 + \"px\",\n        right: rand(120) + \"%\",\n        randValue: rand(100),\n      });\n    }\n\n    setFallingEmojis(newFallingEmojis);\n  }\n\n  function completeFall() {\n    setTypingString(\"\");\n    setStackedEmojis(stackedEmojis.concat(fallingEmojis));\n    setFallingEmojis([]);\n  }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <BackGround></BackGround>\n      <Emojis emojis={stackedEmojis} isFalling={false}></Emojis>\n      <Emojis emojis={fallingEmojis} isFalling={true}></Emojis>\n\n      <Container\n        maxWidth=\"sm\"\n        style={{\n          height: \"100vh\",\n          justifyContent: \"center\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n        }}\n      >\n        <h1>input emoji name</h1>\n\n        <TextField\n          value={typingString}\n          onChange={(e) => setTypingString(e.target.value)}\n          variant=\"outlined\"\n          color=\"secondary\"\n          fullWidth={true}\n        />\n      </Container>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}